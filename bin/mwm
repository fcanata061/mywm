#!/usr/bin/env python3
"""
mwm - launcher evoluído para MyWM

Uso:
  mwm [--config PATH] [--debug] [--version] [--xephyr]

O script tenta:
  1. importar e executar `mywm1.0.main.main()` se o pacote estiver instalado/importável;
  2. se não estiver instalado, tenta ajustar sys.path para usar a cópia local (repo) e executar o módulo;
  3. registra logs e protege a execução com tratamento de exceção adequado.
"""
from __future__ import annotations
import os
import sys
import argparse
import logging
import importlib
import runpy
import subprocess
from typing import Optional

APP_NAME = "mwm"
VERSION = "1.0.0"

# Logging básico (console). Se quiser logging para arquivo, ajuste aqui.
logger = logging.getLogger(APP_NAME)
handler = logging.StreamHandler(sys.stdout)
fmt = "[%(asctime)s] %(levelname)s:%(name)s: %(message)s"
handler.setFormatter(logging.Formatter(fmt))
logger.addHandler(handler)
logger.setLevel(logging.INFO)


def parse_args(argv=None):
    p = argparse.ArgumentParser(prog=APP_NAME, description="Launcher para MyWM")
    p.add_argument("--config", "-c", help="Caminho para config.py (opcional)")
    p.add_argument("--debug", "-d", action="store_true", help="Habilita logging DEBUG")
    p.add_argument("--version", action="store_true", help="Mostra versão e sai")
    p.add_argument("--xephyr", nargs="?", const=":1", help="Inicia em Xephyr (opcional: DISPLAY), ex: --xephyr :2")
    return p.parse_args(argv)


def start_xephyr_if_requested(xephyr_spec: Optional[str]):
    """
    Se requerido, tenta iniciar Xephyr em segundo plano e exporta DISPLAY.
    Requer que 'Xephyr' esteja instalado no sistema.
    """
    if not xephyr_spec:
        return
    display_name = xephyr_spec
    logger.info("Iniciando Xephyr em %s (teste) ...", display_name)
    try:
        # -screen 1024x768 ajustar conforme necessário
        subprocess.Popen(["Xephyr", display_name, "-screen", "1280x800", "-ac", "-br", "-noreset"])
        os.environ["DISPLAY"] = display_name
        # aguardar curto período para o servidor levantar
        import time
        time.sleep(0.6)
    except FileNotFoundError:
        logger.error("Xephyr não encontrado. Instale 'xserver-xephyr' (deb/apt) ou pacote equivalente.")
    except Exception:
        logger.exception("Falha ao tentar iniciar Xephyr")


def set_config_env(config_path: Optional[str]):
    """
    Se o usuário passou um config customizado, torna isso disponível via variável de ambiente
    para que o core.config_loader (ou main) consulte se desejar.
    """
    if config_path:
        os.environ["MYWM_CONFIG_PATH"] = os.path.abspath(os.path.expanduser(config_path))
        logger.debug("MYWM_CONFIG_PATH=%s", os.environ["MYWM_CONFIG_PATH"])


def run_main_from_package():
    """
    Tenta importar mywm1.0.main e chamar main(). Se falhar, levanta a exceção.
    """
    try:
        mod = importlib.import_module("mywm1.0.main")
        if hasattr(mod, "main") and callable(mod.main):
            logger.debug("Executando mywm1.0.main.main() (pacote importado).")
            mod.main()
            return 0
        else:
            # Fallback: executar como módulo
            logger.debug("Módulo encontrado, mas sem função main(). Executando como __main__.")
            runpy.run_module("mywm1.0.main", run_name="__main__")
            return 0
    except Exception:
        logger.exception("Falha ao executar mywm1.0.main via import")
        raise


def run_main_from_repo():
    """
    Tenta localizar diretório pai com `mywm1.0` (assumindo estrutura de repo)
    e executar o módulo main a partir dele.
    """
    # Caminho do script `mwm` (ex: repo/bin/mwm ou ~/.local/bin/mwm)
    script_dir = os.path.dirname(os.path.abspath(__file__))
    # possível raiz do repo (bin/..)
    candidate_roots = [
        os.path.abspath(os.path.join(script_dir, "..")),   # repo/bin -> repo
        os.path.abspath(os.path.join(script_dir, "..", "..")),  # repo/scripts/bin -> repo
    ]
    for root in candidate_roots:
        pkg_path = os.path.join(root, "mywm1.0")
        if os.path.isdir(pkg_path):
            logger.debug("Usando copy local em %s", pkg_path)
            # inserir raiz (não o pacote) para permitir 'import mywm1.0.main'
            sys.path.insert(0, root)
            try:
                return run_main_from_package()
            except Exception:
                # se falhar, remover inserção e tentar próximo
                sys.path.pop(0)
                continue
    # se não encontrado, tentar executar diretamente o arquivo main.py se existir no candidato root
    for root in candidate_roots:
        main_py = os.path.join(root, "mywm1.0", "main.py")
        if os.path.isfile(main_py):
            logger.debug("Executando main.py diretamente: %s", main_py)
            try:
                runpy.run_path(main_py, run_name="__main__")
                return 0
            except Exception:
                logger.exception("Falha runpy.run_path main.py")
    raise ImportError("Não foi possível localizar o pacote 'mywm1.0' nem o arquivo main.py no repositório.")


def main_entry(argv=None):
    args = parse_args(argv)
    if args.version:
        print(f"{APP_NAME} {VERSION}")
        return 0

    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Modo DEBUG ativado")

    # optional: start Xephyr before setting DISPLAY
    if args.xephyr:
        start_xephyr_if_requested(args.xephyr)

    set_config_env(args.config)

    # Primeiro: tentar executar via import (instalado com pip)
    try:
        return run_main_from_package()
    except Exception:
        logger.debug("Execução via package falhou — tentando executar a partir do repositório local.")
        try:
            return run_main_from_repo()
        except Exception as e:
            logger.exception("Falha iniciando WM: %s", e)
            print("Erro: não foi possível iniciar MyWM. Veja logs para detalhes.", file=sys.stderr)
            return 2


if __name__ == "__main__":
    sys.exit(main_entry(sys.argv[1:]))
