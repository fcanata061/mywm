---------------------------------
📊 StatusBar – Módulos e Uso
---------------------------------
O MyWM inclui uma barra de status flutuante e configurável.
Ela pode exibir informações do sistema e workspaces, além
de interagir com cliques do mouse.

A StatusBar é configurada no arquivo:
    config/config.py → seção "statusbar"

Exemplo de configuração:
    "statusbar": {
        "height": 24,
        "bg": "#222222",
        "fg": "#ffffff",
        "font": "fixed",
        "modules": ["workspaces", "window", "cpu", "mem", "net", "vol", "bat", "clock"],
        "position": "top"   # ou "bottom"
    }

---------------------------------
📦 Dependências para a StatusBar
---------------------------------
Obrigatórias:
    psutil        → leitura de CPU, memória e disco
    python-xlib   → integração X11 para exibir a barra

Opcionais (para módulos extras):
    alsaaudio     → controle de volume (ou pactl/amixer externo)
    acpi          → monitorar bateria
    cairocffi     → renderização avançada (gráficos, fontes customizadas)

Instalar:
    pip install psutil
    sudo apt install acpi

---------------------------------
📋 Módulos Suportados
---------------------------------
1. workspaces
   → Mostra a lista de workspaces e destaca o ativo.
   → Clique do mouse muda o workspace.

2. window
   → Mostra o título da janela focada.

3. cpu
   → Mostra uso da CPU (%).
   → Requer psutil.

4. mem
   → Mostra uso da memória RAM (%).
   → Requer psutil.

5. net
   → Mostra status da rede (↑ download / ↓ upload).
   → Pode usar psutil.net_io_counters() ou script externo.

6. vol
   → Mostra volume do sistema.
   → Requer alsaaudio (Python) ou integração com pactl/amixer.

7. bat
   → Mostra nível da bateria (%).
   → Requer acpi instalado no sistema.

8. clock
   → Mostra data/hora no formato configurado.

---------------------------------
⚙️ Personalização dos módulos
---------------------------------
- A ordem em "modules" define a ordem exibida.
- Você pode remover qualquer módulo (ex.: usar só ["workspaces", "clock"]).
- Pode adicionar scripts externos criando um módulo customizado
  no arquivo managers/statusbar.py e adicionando ao config.

---------------------------------
🚀 Iniciando a StatusBar
---------------------------------
A barra inicia junto com o WM automaticamente.
Não é necessário rodar comando separado.

Se quiser reiniciar manualmente:
    killall mwm && mwm

---------------------------------
🖌️ Aparência
---------------------------------
- A cor de fundo é configurada em "bg".
- A cor do texto é configurada em "fg".
- A fonte pode ser "fixed", "monospace", ou outra disponível no X11.
- A altura é configurável em "height".

---------------------------------
📌 Dicas avançadas
---------------------------------
- Para ícones e fontes legais: instalar fonts-awesome e definir em "font".
- Para statusbar transparente: usar compositor (picom).
- Para barra externa (ex.: polybar), desabilite a interna removendo "statusbar".



==============================
📖 Tutorial MyWM (mwm) – Atualizado
==============================

MyWM (mwm) é um window manager minimalista e extensível escrito em Python,
com suporte a tiling, floating, EWMH, fullscreen, scratchpad, multi-monitor,
notificações e statusbar avançada. Ele foi projetado para ser leve,
hackável e personalizável.

---------------------------------
📂 Estrutura de diretórios
---------------------------------
mywm1.0/
│── config/
│   └── config.py          # Configurações (keybindings, workspaces, cores, apps floating etc.)
│── core/
│   ├── ewmh.py            # Suporte EWMH/ICCCM completo
│   ├── layouts.py         # Gerenciamento de layouts (tiling, monocle, grid…)
│── managers/
│   ├── decorations.py     # Bordas e decorações das janelas
│   ├── floating.py        # Floating manager (mouse + teclado + snapping + fullscreen-aware)
│   ├── keybindings.py     # Mapeamento de teclas e comandos
│   ├── multimonitor.py    # Suporte multi-monitor (Xinerama/XRandR)
│   ├── notificações.py    # Sistema de notificações
│   ├── scratchpad.py      # Scratchpad (janelas ocultas/rápidas)
│   ├── statusbar.py       # Statusbar robusta e interativa
│   ├── window.py          # Abstração de janelas
│   └── workspaces.py      # Workspaces virtuais
│── main.py                # Loop principal do WM (integra todos os módulos)
setup.py                   # Instalação via pip

---------------------------------
📦 Dependências
---------------------------------
Obrigatórias:
    pip install python-xlib psutil

Opcionais:
    cairocffi   → statusbar com gráficos, fontes avançadas
    xcffib      → backend alternativo ao xlib (para futuro)

---------------------------------
🔧 Instalação
---------------------------------
1. Clonar o repositório:
    git clone https://github.com/fcanata061/mywm.git
    cd mywm/mywm1.0

2. Instalar via pip:
    pip install .

Isso cria o binário "mwm" no PATH.

---------------------------------
🚀 Uso
---------------------------------
Adicionar ao ~/.xinitrc:
    exec mwm

Ou rodar manualmente em outra sessão X:
    Xephyr :1 -screen 1280x720 &
    DISPLAY=:1 mwm

---------------------------------
🎹 Keybindings (config/config.py)
---------------------------------
Mod + Enter      → abrir terminal
Mod + Q          → fechar janela
Mod + J/K        → navegar entre janelas
Mod + H/L        → redimensionar tiling
Mod + F          → fullscreen
Mod + Shift+Space→ alternar floating/tiling
Mod + [1-9]      → trocar workspace
Mod + Shift+[1-9]→ mover janela para workspace
Mod + S          → toggle scratchpad

---------------------------------
🖼️ Recursos Suportados
---------------------------------
✓ Tiling Layouts: monocle, split, grid
✓ Floating completo:
    - mover/resize com mouse (Mod+clique)
    - snapping em bordas/cantos
    - always-on-top
    - restaurar posição ao sair do fullscreen
✓ Fullscreen real (oculta statusbar, respeita EWMH)
✓ Statusbar com workspaces, janela focada, hora, CPU/RAM, cliques
✓ Workspaces virtuais dinâmicos
✓ Scratchpad
✓ Notificações integradas
✓ Multi-monitor (Xinerama/XRandR)
✓ EWMH/ICCCM completo:
    _NET_WM_STATE, _NET_ACTIVE_WINDOW,
    _NET_WM_DESKTOP, _NET_SUPPORTED,
    _NET_CURRENT_DESKTOP, etc.

---------------------------------
🛠️ Customização
---------------------------------
Edite config/config.py para:
- Keybindings
- Cores da statusbar
- Workspaces
- Aplicativos floating
- Layout padrão

---------------------------------
🧑‍💻 Desenvolvimento
---------------------------------
Rodar em modo debug:
    mwm --debug

---------------------------------
🚧 Limitações atuais
---------------------------------
- Apenas X11 (Wayland não suportado)
- Statusbar simples comparada a Polybar
- Não tem compositor (recomenda-se usar picom)

---------------------------------
📜 Licença
---------------------------------
MIT License
